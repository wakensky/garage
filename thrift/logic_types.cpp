/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "logic_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace ss { namespace logic {


Req::~Req() throw() {
}


void Req::__set_msg(const std::string& val) {
  this->msg = val;
__isset.msg = true;
}

uint32_t Req::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Req::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Req");

  if (this->__isset.msg) {
    xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->msg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Req &a, Req &b) {
  using ::std::swap;
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

Req::Req(const Req& other0) {
  msg = other0.msg;
  __isset = other0.__isset;
}
Req& Req::operator=(const Req& other1) {
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void Req::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Req(";
  out << "msg="; (__isset.msg ? (out << to_string(msg)) : (out << "<null>"));
  out << ")";
}


Rsp::~Rsp() throw() {
}


void Rsp::__set_status(const std::string& val) {
  this->status = val;
__isset.status = true;
}

uint32_t Rsp::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rsp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rsp");

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rsp &a, Rsp &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Rsp::Rsp(const Rsp& other2) {
  status = other2.status;
  __isset = other2.__isset;
}
Rsp& Rsp::operator=(const Rsp& other3) {
  status = other3.status;
  __isset = other3.__isset;
  return *this;
}
void Rsp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rsp(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}

}} // namespace
